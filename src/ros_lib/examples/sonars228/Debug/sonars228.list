
sonars228.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  2000000c  08004cac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08004cac  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b348  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d2f  00000000  00000000  0003b384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  0003e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c8c7  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f316  00000000  00000000  0005cc87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ec70  00000000  00000000  0006bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ac0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  0010ac88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c48 	.word	0x08004c48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c48 	.word	0x08004c48

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f927 	bl	800042c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f004 fa62 	bl	80046ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f93f 	bl	8000496 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000230:	f000 f907 	bl	8000442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 021f 	and.w	r2, r3, #31
 8000308:	4907      	ldr	r1, [pc, #28]	; (8000328 <NVIC_EnableIRQ+0x30>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	095b      	lsrs	r3, r3, #5
 8000310:	2001      	movs	r0, #1
 8000312:	fa00 f202 	lsl.w	r2, r0, r2
 8000316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e100 	.word	0xe000e100

0800032c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	da0b      	bge.n	8000358 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	b2da      	uxtb	r2, r3
 8000344:	490c      	ldr	r1, [pc, #48]	; (8000378 <NVIC_SetPriority+0x4c>)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 030f 	and.w	r3, r3, #15
 800034c:	3b04      	subs	r3, #4
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000356:	e009      	b.n	800036c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <NVIC_SetPriority+0x50>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	e000ed00 	.word	0xe000ed00
 800037c:	e000e100 	.word	0xe000e100

08000380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000380:	b480      	push	{r7}
 8000382:	b089      	sub	sp, #36	; 0x24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f003 0307 	and.w	r3, r3, #7
 8000392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	f1c3 0307 	rsb	r3, r3, #7
 800039a:	2b04      	cmp	r3, #4
 800039c:	bf28      	it	cs
 800039e:	2304      	movcs	r3, #4
 80003a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	3304      	adds	r3, #4
 80003a6:	2b06      	cmp	r3, #6
 80003a8:	d902      	bls.n	80003b0 <NVIC_EncodePriority+0x30>
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	3b03      	subs	r3, #3
 80003ae:	e000      	b.n	80003b2 <NVIC_EncodePriority+0x32>
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003b8:	69bb      	ldr	r3, [r7, #24]
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	43da      	mvns	r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	401a      	ands	r2, r3
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	43d9      	mvns	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d8:	4313      	orrs	r3, r2
         );
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3724      	adds	r7, #36	; 0x24
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003f8:	d301      	bcc.n	80003fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003fa:	2301      	movs	r3, #1
 80003fc:	e00f      	b.n	800041e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003fe:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <SysTick_Config+0x40>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000406:	210f      	movs	r1, #15
 8000408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800040c:	f7ff ff8e 	bl	800032c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <SysTick_Config+0x40>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SysTick_Config+0x40>)
 8000418:	2207      	movs	r2, #7
 800041a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800041c:	2300      	movs	r3, #0
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	e000e010 	.word	0xe000e010

0800042c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f7ff ff2d 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af00      	add	r7, sp, #0
 8000448:	4603      	mov	r3, r0
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000454:	f7ff ff42 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	68b9      	ldr	r1, [r7, #8]
 800045e:	6978      	ldr	r0, [r7, #20]
 8000460:	f7ff ff8e 	bl	8000380 <NVIC_EncodePriority>
 8000464:	4602      	mov	r2, r0
 8000466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff5d 	bl	800032c <NVIC_SetPriority>
}
 8000472:	bf00      	nop
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	4603      	mov	r3, r0
 8000482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff35 	bl	80002f8 <NVIC_EnableIRQ>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffa2 	bl	80003e8 <SysTick_Config>
 80004a4:	4603      	mov	r3, r0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b084      	sub	sp, #16
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d005      	beq.n	80004d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2204      	movs	r2, #4
 80004c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
 80004cc:	73fb      	strb	r3, [r7, #15]
 80004ce:	e027      	b.n	8000520 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f022 020e 	bic.w	r2, r2, #14
 80004de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f022 0201 	bic.w	r2, r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f8:	2101      	movs	r1, #1
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2201      	movs	r2, #1
 8000504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000514:	2b00      	cmp	r3, #0
 8000516:	d003      	beq.n	8000520 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	4798      	blx	r3
    } 
  }
  return status;
 8000520:	7bfb      	ldrb	r3, [r7, #15]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800052c:	b480      	push	{r7}
 800052e:	b087      	sub	sp, #28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000542:	e154      	b.n	80007ee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	4013      	ands	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 8146 	beq.w	80007e8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d003      	beq.n	800056c <HAL_GPIO_Init+0x40>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b12      	cmp	r3, #18
 800056a:	d123      	bne.n	80005b4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	08da      	lsrs	r2, r3, #3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3208      	adds	r2, #8
 8000574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000578:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	f003 0307 	and.w	r3, r3, #7
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	220f      	movs	r2, #15
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	691a      	ldr	r2, [r3, #16]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	08da      	lsrs	r2, r3, #3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3208      	adds	r2, #8
 80005ae:	6939      	ldr	r1, [r7, #16]
 80005b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2203      	movs	r2, #3
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4013      	ands	r3, r2
 80005ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 0203 	and.w	r2, r3, #3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00b      	beq.n	8000608 <HAL_GPIO_Init+0xdc>
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d007      	beq.n	8000608 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005fc:	2b11      	cmp	r3, #17
 80005fe:	d003      	beq.n	8000608 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	2b12      	cmp	r3, #18
 8000606:	d130      	bne.n	800066a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	2203      	movs	r2, #3
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	43db      	mvns	r3, r3
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	68da      	ldr	r2, [r3, #12]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	4313      	orrs	r3, r2
 8000630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800063e:	2201      	movs	r2, #1
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	43db      	mvns	r3, r3
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	4013      	ands	r3, r2
 800064c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	f003 0201 	and.w	r2, r3, #1
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4313      	orrs	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2203      	movs	r2, #3
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	4013      	ands	r3, r2
 8000680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 80a0 	beq.w	80007e8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	4b58      	ldr	r3, [pc, #352]	; (800080c <HAL_GPIO_Init+0x2e0>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a57      	ldr	r2, [pc, #348]	; (800080c <HAL_GPIO_Init+0x2e0>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b55      	ldr	r3, [pc, #340]	; (800080c <HAL_GPIO_Init+0x2e0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006c0:	4a53      	ldr	r2, [pc, #332]	; (8000810 <HAL_GPIO_Init+0x2e4>)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	3302      	adds	r3, #2
 80006c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006cc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	220f      	movs	r2, #15
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006ea:	d019      	beq.n	8000720 <HAL_GPIO_Init+0x1f4>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a49      	ldr	r2, [pc, #292]	; (8000814 <HAL_GPIO_Init+0x2e8>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d013      	beq.n	800071c <HAL_GPIO_Init+0x1f0>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a48      	ldr	r2, [pc, #288]	; (8000818 <HAL_GPIO_Init+0x2ec>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d00d      	beq.n	8000718 <HAL_GPIO_Init+0x1ec>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a47      	ldr	r2, [pc, #284]	; (800081c <HAL_GPIO_Init+0x2f0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d007      	beq.n	8000714 <HAL_GPIO_Init+0x1e8>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a46      	ldr	r2, [pc, #280]	; (8000820 <HAL_GPIO_Init+0x2f4>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d101      	bne.n	8000710 <HAL_GPIO_Init+0x1e4>
 800070c:	2304      	movs	r3, #4
 800070e:	e008      	b.n	8000722 <HAL_GPIO_Init+0x1f6>
 8000710:	2305      	movs	r3, #5
 8000712:	e006      	b.n	8000722 <HAL_GPIO_Init+0x1f6>
 8000714:	2303      	movs	r3, #3
 8000716:	e004      	b.n	8000722 <HAL_GPIO_Init+0x1f6>
 8000718:	2302      	movs	r3, #2
 800071a:	e002      	b.n	8000722 <HAL_GPIO_Init+0x1f6>
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <HAL_GPIO_Init+0x1f6>
 8000720:	2300      	movs	r3, #0
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	f002 0203 	and.w	r2, r2, #3
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	4093      	lsls	r3, r2
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	4313      	orrs	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000732:	4937      	ldr	r1, [pc, #220]	; (8000810 <HAL_GPIO_Init+0x2e4>)
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	3302      	adds	r3, #2
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000740:	4b38      	ldr	r3, [pc, #224]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	43db      	mvns	r3, r3
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	4013      	ands	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4313      	orrs	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000764:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	43db      	mvns	r3, r3
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	4013      	ands	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4313      	orrs	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	43db      	mvns	r3, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	43db      	mvns	r3, r3
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	4013      	ands	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4313      	orrs	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <HAL_GPIO_Init+0x2f8>)
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa22 f303 	lsr.w	r3, r2, r3
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f47f aea3 	bne.w	8000544 <HAL_GPIO_Init+0x18>
  }
}
 80007fe:	bf00      	nop
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000
 8000814:	48000400 	.word	0x48000400
 8000818:	48000800 	.word	0x48000800
 800081c:	48000c00 	.word	0x48000c00
 8000820:	48001000 	.word	0x48001000
 8000824:	40010400 	.word	0x40010400

08000828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	807b      	strh	r3, [r7, #2]
 8000834:	4613      	mov	r3, r2
 8000836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000838:	787b      	ldrb	r3, [r7, #1]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800083e:	887a      	ldrh	r2, [r7, #2]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000844:	e002      	b.n	800084c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000846:	887a      	ldrh	r2, [r7, #2]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e081      	b.n	800096e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d106      	bne.n	8000884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f003 ff38 	bl	80046f4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2224      	movs	r2, #36	; 0x24
 8000888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f022 0201 	bic.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80008a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d107      	bne.n	80008d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	e006      	b.n	80008e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80008de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d104      	bne.n	80008f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691a      	ldr	r2, [r3, #16]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	ea42 0103 	orr.w	r1, r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	021a      	lsls	r2, r3, #8
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	430a      	orrs	r2, r1
 800092e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69d9      	ldr	r1, [r3, #28]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a1a      	ldr	r2, [r3, #32]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	430a      	orrs	r2, r1
 800093e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 0201 	orr.w	r2, r2, #1
 800094e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2220      	movs	r2, #32
 800095a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b20      	cmp	r3, #32
 800098a:	d138      	bne.n	80009fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000992:	2b01      	cmp	r3, #1
 8000994:	d101      	bne.n	800099a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000996:	2302      	movs	r3, #2
 8000998:	e032      	b.n	8000a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2224      	movs	r2, #36	; 0x24
 80009a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0201 	bic.w	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 0201 	orr.w	r2, r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2220      	movs	r2, #32
 80009ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80009fe:	2302      	movs	r3, #2
  }
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b20      	cmp	r3, #32
 8000a24:	d139      	bne.n	8000a9a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d101      	bne.n	8000a34 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e033      	b.n	8000a9c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2224      	movs	r2, #36	; 0x24
 8000a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0201 	bic.w	r2, r2, #1
 8000a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f042 0201 	orr.w	r2, r2, #1
 8000a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2220      	movs	r2, #32
 8000a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000a9a:	2302      	movs	r3, #2
  }
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e0ce      	b.n	8000c60 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d106      	bne.n	8000adc <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f003 ff86 	bl	80049e8 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e040      	b.n	8000b6c <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4613      	mov	r3, r2
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	440b      	add	r3, r1
 8000af8:	3329      	adds	r3, #41	; 0x29
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	b2d8      	uxtb	r0, r3
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4613      	mov	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	3328      	adds	r3, #40	; 0x28
 8000b12:	4602      	mov	r2, r0
 8000b14:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	332b      	adds	r3, #43	; 0x2b
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	3334      	adds	r3, #52	; 0x34
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4613      	mov	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3338      	adds	r3, #56	; 0x38
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	333c      	adds	r3, #60	; 0x3c
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d3b9      	bcc.n	8000aea <HAL_PCD_Init+0x42>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e046      	b.n	8000c0a <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4613      	mov	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	1a9b      	subs	r3, r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	b2d8      	uxtb	r0, r3
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8000ba8:	4602      	mov	r2, r0
 8000baa:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	1a9b      	subs	r3, r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3b3      	bcc.n	8000b7c <HAL_PCD_Init+0xd4>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1U*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0U*/
 hpcd->Instance->CNTR = 0U;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0U;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000c3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000c40:	60bb      	str	r3, [r7, #8]
  | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0U;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f000 beda 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 816e 	beq.w	8000f6e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c92:	4bb5      	ldr	r3, [pc, #724]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d00c      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c9e:	4bb2      	ldr	r3, [pc, #712]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d15a      	bne.n	8000d60 <HAL_RCC_OscConfig+0xf8>
 8000caa:	4baf      	ldr	r3, [pc, #700]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb6:	d153      	bne.n	8000d60 <HAL_RCC_OscConfig+0xf8>
 8000cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cbc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ccc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <HAL_RCC_OscConfig+0x82>
 8000ce4:	4ba0      	ldr	r3, [pc, #640]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	e015      	b.n	8000d16 <HAL_RCC_OscConfig+0xae>
 8000cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d12:	4b95      	ldr	r3, [pc, #596]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d1a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d1e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d22:	fa92 f2a2 	rbit	r2, r2
 8000d26:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000d2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	b252      	sxtb	r2, r2
 8000d34:	f042 0220 	orr.w	r2, r2, #32
 8000d38:	b252      	sxtb	r2, r2
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	f002 021f 	and.w	r2, r2, #31
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 810f 	beq.w	8000f6c <HAL_RCC_OscConfig+0x304>
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f040 8109 	bne.w	8000f6c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f000 be6b 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x112>
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a7d      	ldr	r2, [pc, #500]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e030      	b.n	8000ddc <HAL_RCC_OscConfig+0x174>
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10c      	bne.n	8000d9e <HAL_RCC_OscConfig+0x136>
 8000d84:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a77      	ldr	r2, [pc, #476]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a74      	ldr	r2, [pc, #464]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e01e      	b.n	8000ddc <HAL_RCC_OscConfig+0x174>
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x15c>
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a6b      	ldr	r2, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e00b      	b.n	8000ddc <HAL_RCC_OscConfig+0x174>
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a67      	ldr	r2, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a64      	ldr	r2, [pc, #400]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ddc:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	f023 020f 	bic.w	r2, r3, #15
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	495f      	ldr	r1, [pc, #380]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d05a      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fa3f 	bl	800027c <HAL_GetTick>
 8000dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e02:	e00a      	b.n	8000e1a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fa3a 	bl	800027c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	; 0x64
 8000e12:	d902      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f000 be0e 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
 8000e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e22:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000e2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	095b      	lsrs	r3, r3, #5
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d102      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1e4>
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	e015      	b.n	8000e78 <HAL_RCC_OscConfig+0x210>
 8000e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e64:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e68:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000e80:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000e84:	fa92 f2a2 	rbit	r2, r2
 8000e88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000e8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	b252      	sxtb	r2, r2
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	b252      	sxtb	r2, r2
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0aa      	beq.n	8000e04 <HAL_RCC_OscConfig+0x19c>
 8000eae:	e05e      	b.n	8000f6e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff f9e4 	bl	800027c <HAL_GetTick>
 8000eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb8:	e00a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff f9df 	bl	800027c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d902      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f000 bdb3 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
 8000ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000ee4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x29a>
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	e015      	b.n	8000f2e <HAL_RCC_OscConfig+0x2c6>
 8000f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f06:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_RCC_OscConfig+0x300>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f32:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f36:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f3a:	fa92 f2a2 	rbit	r2, r2
 8000f3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000f42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f46:	fab2 f282 	clz	r2, r2
 8000f4a:	b252      	sxtb	r2, r2
 8000f4c:	f042 0220 	orr.w	r2, r2, #32
 8000f50:	b252      	sxtb	r2, r2
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	f002 021f 	and.w	r2, r2, #31
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1aa      	bne.n	8000eba <HAL_RCC_OscConfig+0x252>
 8000f64:	e003      	b.n	8000f6e <HAL_RCC_OscConfig+0x306>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 8170 	beq.w	800125e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f7e:	4bd0      	ldr	r3, [pc, #832]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f8a:	4bcd      	ldr	r3, [pc, #820]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d16d      	bne.n	8001072 <HAL_RCC_OscConfig+0x40a>
 8000f96:	4bca      	ldr	r3, [pc, #808]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d167      	bne.n	8001072 <HAL_RCC_OscConfig+0x40a>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000fb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x36a>
 8000fcc:	4bbc      	ldr	r3, [pc, #752]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	e013      	b.n	8000ffa <HAL_RCC_OscConfig+0x392>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fea:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ff6:	4bb2      	ldr	r3, [pc, #712]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001000:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001004:	fa92 f2a2 	rbit	r2, r2
 8001008:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800100c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b252      	sxtb	r2, r2
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	b252      	sxtb	r2, r2
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	f002 021f 	and.w	r2, r2, #31
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	4013      	ands	r3, r2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_RCC_OscConfig+0x3d6>
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d002      	beq.n	800103e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	f000 bcfc 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103e:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6959      	ldr	r1, [r3, #20]
 800104c:	23f8      	movs	r3, #248	; 0xf8
 800104e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800105e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	4995      	ldr	r1, [pc, #596]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 800106c:	4313      	orrs	r3, r2
 800106e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001070:	e0f5      	b.n	800125e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8085 	beq.w	8001188 <HAL_RCC_OscConfig+0x520>
 800107e:	2301      	movs	r3, #1
 8001080:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001090:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800109c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	461a      	mov	r2, r3
 80010a4:	2301      	movs	r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff f8e8 	bl	800027c <HAL_GetTick>
 80010ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff f8e3 	bl	800027c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d902      	bls.n	80010c8 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f000 bcb7 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80010da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_OscConfig+0x490>
 80010f2:	4b73      	ldr	r3, [pc, #460]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x4b8>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001110:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800111c:	4b68      	ldr	r3, [pc, #416]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	2202      	movs	r2, #2
 8001122:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001126:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001132:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b252      	sxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b252      	sxtb	r2, r2
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	f002 021f 	and.w	r2, r2, #31
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0ae      	beq.n	80010b2 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6959      	ldr	r1, [r3, #20]
 8001162:	23f8      	movs	r3, #248	; 0xf8
 8001164:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001174:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	494f      	ldr	r1, [pc, #316]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
 8001186:	e06a      	b.n	800125e <HAL_RCC_OscConfig+0x5f6>
 8001188:	2301      	movs	r3, #1
 800118a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800119a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	fab3 f383 	clz	r3, r3
 80011a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	461a      	mov	r2, r3
 80011ae:	2300      	movs	r3, #0
 80011b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff f863 	bl	800027c <HAL_GetTick>
 80011b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff f85e 	bl	800027c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d902      	bls.n	80011d2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f000 bc32 	b.w	8001a36 <HAL_RCC_OscConfig+0xdce>
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80011e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <HAL_RCC_OscConfig+0x59a>
 80011fc:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	e013      	b.n	800122a <HAL_RCC_OscConfig+0x5c2>
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800121a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x658>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	2202      	movs	r2, #2
 800122c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001230:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001234:	fa92 f2a2 	rbit	r2, r2
 8001238:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800123c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001240:	fab2 f282 	clz	r2, r2
 8001244:	b252      	sxtb	r2, r2
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	b252      	sxtb	r2, r2
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	f002 021f 	and.w	r2, r2, #31
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ae      	bne.n	80011bc <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80d8 	beq.w	800141e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d067      	beq.n	8001348 <HAL_RCC_OscConfig+0x6e0>
 8001278:	2301      	movs	r3, #1
 800127a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800128a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_RCC_OscConfig+0x65c>)
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	461a      	mov	r2, r3
 800129c:	2301      	movs	r3, #1
 800129e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7fe ffec 	bl	800027c <HAL_GetTick>
 80012a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a8:	e00e      	b.n	80012c8 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7fe ffe7 	bl	800027c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d906      	bls.n	80012c8 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e3bb      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	10908120 	.word	0x10908120
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012f2:	2202      	movs	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fa93 f2a3 	rbit	r2, r3
 8001300:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001304:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800130e:	2102      	movs	r1, #2
 8001310:	6019      	str	r1, [r3, #0]
 8001312:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f1a3 	rbit	r1, r3
 800131c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001320:	6019      	str	r1, [r3, #0]
  return(result);
 8001322:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fab3 f383 	clz	r3, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001332:	b25b      	sxtb	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0b1      	beq.n	80012aa <HAL_RCC_OscConfig+0x642>
 8001346:	e06a      	b.n	800141e <HAL_RCC_OscConfig+0x7b6>
 8001348:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800135e:	601a      	str	r2, [r3, #0]
  return(result);
 8001360:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001364:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	4b8c      	ldr	r3, [pc, #560]	; (80015a0 <HAL_RCC_OscConfig+0x938>)
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	461a      	mov	r2, r3
 8001374:	2300      	movs	r3, #0
 8001376:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7fe ff80 	bl	800027c <HAL_GetTick>
 800137c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	e009      	b.n	8001396 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001382:	f7fe ff7b 	bl	800027c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e34f      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 8001396:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fa93 f2a3 	rbit	r2, r3
 80013a8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b2:	2202      	movs	r2, #2
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ca:	2202      	movs	r2, #2
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f2a3 	rbit	r2, r3
 80013d8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80013e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e6:	2102      	movs	r1, #2
 80013e8:	6019      	str	r1, [r3, #0]
 80013ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fa93 f1a3 	rbit	r1, r3
 80013f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013f8:	6019      	str	r1, [r3, #0]
  return(result);
 80013fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b25b      	sxtb	r3, r3
 8001406:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1b1      	bne.n	8001382 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8159 	beq.w	80016e0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001434:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d112      	bne.n	8001466 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001460:	2301      	movs	r3, #1
 8001462:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d11a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7fe fefd 	bl	800027c <HAL_GetTick>
 8001482:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	e009      	b.n	800149c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001488:	f7fe fef8 	bl	800027c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b64      	cmp	r3, #100	; 0x64
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e2cc      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x93c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ef      	beq.n	8001488 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x858>
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a39      	ldr	r2, [pc, #228]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	e02f      	b.n	8001520 <HAL_RCC_OscConfig+0x8b8>
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x87c>
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0x8b8>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x8a0>
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x934>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x8b8>
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x934>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d06b      	beq.n	8001602 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7fe fea7 	bl	800027c <HAL_GetTick>
 800152e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7fe fea2 	bl	800027c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	4293      	cmp	r3, r2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e274      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 800154c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800157a:	601a      	str	r2, [r3, #0]
  return(result);
 800157c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001580:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x940>
 8001596:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_RCC_OscConfig+0x934>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	e013      	b.n	80015c4 <HAL_RCC_OscConfig+0x95c>
 800159c:	40021000 	.word	0x40021000
 80015a0:	10908120 	.word	0x10908120
 80015a4:	40007000 	.word	0x40007000
 80015a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4bbb      	ldr	r3, [pc, #748]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015c8:	2102      	movs	r1, #2
 80015ca:	6011      	str	r1, [r2, #0]
 80015cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	fa92 f1a2 	rbit	r1, r2
 80015d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015da:	6011      	str	r1, [r2, #0]
  return(result);
 80015dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b252      	sxtb	r2, r2
 80015e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015ec:	b252      	sxtb	r2, r2
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d099      	beq.n	8001534 <HAL_RCC_OscConfig+0x8cc>
 8001600:	e064      	b.n	80016cc <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7fe fe3b 	bl	800027c <HAL_GetTick>
 8001606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7fe fe36 	bl	800027c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e208      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 8001624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001628:	2202      	movs	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001652:	601a      	str	r2, [r3, #0]
  return(result);
 8001654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001658:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0xa0c>
 800166e:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	e00d      	b.n	8001690 <HAL_RCC_OscConfig+0xa28>
 8001674:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001694:	2102      	movs	r1, #2
 8001696:	6011      	str	r1, [r2, #0]
 8001698:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	fa92 f1a2 	rbit	r1, r2
 80016a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016a6:	6011      	str	r1, [r2, #0]
  return(result);
 80016a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	fab2 f282 	clz	r2, r2
 80016b2:	b252      	sxtb	r2, r2
 80016b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b8:	b252      	sxtb	r2, r2
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	f002 021f 	and.w	r2, r2, #31
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d19f      	bne.n	800160c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4a75      	ldr	r2, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80016da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 81a4 	beq.w	8001a34 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ec:	4b70      	ldr	r3, [pc, #448]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	f000 819b 	beq.w	8001a30 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f040 8113 	bne.w	800192c <HAL_RCC_OscConfig+0xcc4>
 8001706:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800170a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800171e:	601a      	str	r2, [r3, #0]
  return(result);
 8001720:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800172e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2300      	movs	r3, #0
 8001738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7fe fd9f 	bl	800027c <HAL_GetTick>
 800173e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7fe fd9a 	bl	800027c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e16e      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 8001758:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800175c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001770:	601a      	str	r2, [r3, #0]
  return(result);
 8001772:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001776:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <HAL_RCC_OscConfig+0xb2a>
 800178c:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	e01b      	b.n	80017ca <HAL_RCC_OscConfig+0xb62>
 8001792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017d2:	6011      	str	r1, [r2, #0]
 80017d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	fa92 f1a2 	rbit	r1, r2
 80017de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e2:	6011      	str	r1, [r2, #0]
  return(result);
 80017e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b252      	sxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b252      	sxtb	r2, r2
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	f002 021f 	and.w	r2, r2, #31
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d19d      	bne.n	8001744 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	430b      	orrs	r3, r1
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183c:	601a      	str	r2, [r3, #0]
  return(result);
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800184c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	461a      	mov	r2, r3
 8001854:	2301      	movs	r3, #1
 8001856:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7fe fd10 	bl	800027c <HAL_GetTick>
 800185c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	e009      	b.n	8001876 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001862:	f7fe fd0b 	bl	800027c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0df      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 8001876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800188e:	601a      	str	r2, [r3, #0]
  return(result);
 8001890:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d104      	bne.n	80018b4 <HAL_RCC_OscConfig+0xc4c>
 80018aa:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <HAL_RCC_OscConfig+0xc48>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xc84>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_RCC_OscConfig+0xdd8>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018f4:	6011      	str	r1, [r2, #0]
 80018f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	fa92 f1a2 	rbit	r1, r2
 8001900:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001904:	6011      	str	r1, [r2, #0]
  return(result);
 8001906:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b252      	sxtb	r2, r2
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	b252      	sxtb	r2, r2
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f002 021f 	and.w	r2, r2, #31
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d09b      	beq.n	8001862 <HAL_RCC_OscConfig+0xbfa>
 800192a:	e083      	b.n	8001a34 <HAL_RCC_OscConfig+0xdcc>
 800192c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001944:	601a      	str	r2, [r3, #0]
  return(result);
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	2300      	movs	r3, #0
 800195e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe fc8c 	bl	800027c <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7fe fc87 	bl	800027c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e05b      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
 800197e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001982:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001996:	601a      	str	r2, [r3, #0]
  return(result);
 8001998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_OscConfig+0xd50>
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_RCC_OscConfig+0xdd8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e01b      	b.n	80019f0 <HAL_RCC_OscConfig+0xd88>
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_RCC_OscConfig+0xdd8>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f107 0214 	add.w	r2, r7, #20
 80019f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019f8:	6011      	str	r1, [r2, #0]
 80019fa:	f107 0214 	add.w	r2, r7, #20
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fa92 f1a2 	rbit	r1, r2
 8001a04:	f107 0210 	add.w	r2, r7, #16
 8001a08:	6011      	str	r1, [r2, #0]
  return(result);
 8001a0a:	f107 0210 	add.w	r2, r7, #16
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	fab2 f282 	clz	r2, r2
 8001a14:	b252      	sxtb	r2, r2
 8001a16:	f042 0220 	orr.w	r2, r2, #32
 8001a1a:	b252      	sxtb	r2, r2
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d19d      	bne.n	800196a <HAL_RCC_OscConfig+0xd02>
 8001a2e:	e001      	b.n	8001a34 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b09e      	sub	sp, #120	; 0x78
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e164      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 0207 	bic.w	r2, r3, #7
 8001a72:	498d      	ldr	r1, [pc, #564]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e14c      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4981      	ldr	r1, [pc, #516]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80df 	beq.w	8001c76 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d13d      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
 8001ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_ClockConfig+0xa6>
 8001ae4:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e00f      	b.n	8001b0a <HAL_RCC_ClockConfig+0xc6>
 8001aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	667b      	str	r3, [r7, #100]	; 0x64
 8001af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60
 8001afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b06:	4b69      	ldr	r3, [pc, #420]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001b18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b1a:	fab2 f282 	clz	r2, r2
 8001b1e:	b252      	sxtb	r2, r2
 8001b20:	f042 0220 	orr.w	r2, r2, #32
 8001b24:	b252      	sxtb	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d17d      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0f4      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d13d      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x17c>
 8001b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d102      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x12a>
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	e00f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x14a>
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b80:	643b      	str	r3, [r7, #64]	; 0x40
 8001b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b92:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b96:	fa92 f2a2 	rbit	r2, r2
 8001b9a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b252      	sxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b252      	sxtb	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13b      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b2      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d102      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x1a4>
 8001be2:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e00d      	b.n	8001c04 <HAL_RCC_ClockConfig+0x1c0>
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	2202      	movs	r2, #2
 8001c06:	61ba      	str	r2, [r7, #24]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	fa92 f2a2 	rbit	r2, r2
 8001c0e:	617a      	str	r2, [r7, #20]
  return(result);
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b252      	sxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b252      	sxtb	r2, r2
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e078      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 0203 	bic.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	491a      	ldr	r1, [pc, #104]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c46:	f7fe fb19 	bl	800027c <HAL_GetTick>
 8001c4a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4e:	f7fe fb15 	bl	800027c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e060      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_ClockConfig+0x268>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 020c 	and.w	r2, r3, #12
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d1eb      	bne.n	8001c4e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d215      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 0207 	bic.w	r2, r3, #7
 8001c8c:	4906      	ldr	r1, [pc, #24]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d006      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e03f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x2e2>
 8001ca6:	bf00      	nop
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_RCC_ClockConfig+0x2ec>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4919      	ldr	r1, [pc, #100]	; (8001d30 <HAL_RCC_ClockConfig+0x2ec>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_ClockConfig+0x2ec>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <HAL_RCC_ClockConfig+0x2ec>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cee:	f000 f825 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_RCC_ClockConfig+0x2ec>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cfc:	23f0      	movs	r3, #240	; 0xf0
 8001cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_RCC_ClockConfig+0x2f0>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 8001d16:	fa21 f303 	lsr.w	r3, r1, r3
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_RCC_ClockConfig+0x2f4>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7fe fa68 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3778      	adds	r7, #120	; 0x78
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08004c80 	.word	0x08004c80
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x30>
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x36>
 8001d6a:	e03c      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d6e:	623b      	str	r3, [r7, #32]
      break;
 8001d70:	e03c      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d78:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001d7c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	607b      	str	r3, [r7, #4]
  return(result);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	230f      	movs	r3, #15
 8001da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	e004      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	623b      	str	r3, [r7, #32]
      break;
 8001de4:	e002      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de8:	623b      	str	r3, [r7, #32]
      break;
 8001dea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	372c      	adds	r7, #44	; 0x2c
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	007a1200 	.word	0x007a1200
 8001e04:	08004c60 	.word	0x08004c60
 8001e08:	08004c70 	.word	0x08004c70
 8001e0c:	003d0900 	.word	0x003d0900

08001e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e2e:	f7ff ffef 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e32:	4601      	mov	r1, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e3c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e40:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	603b      	str	r3, [r7, #0]
  return(result);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08004c90 	.word	0x08004c90

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e72:	f7ff ffcd 	bl	8001e10 <HAL_RCC_GetHCLKFreq>
 8001e76:	4601      	mov	r1, r0
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001e80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e84:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	603b      	str	r3, [r7, #0]
  return(result);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08004c90 	.word	0x08004c90

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b092      	sub	sp, #72	; 0x48
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80d6 	beq.w	800207a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10e      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7fe f9b1 	bl	800027c <HAL_GetTick>
 8001f1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7fe f9ad 	bl	800027c <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b64      	cmp	r3, #100	; 0x64
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e168      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x352>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8083 	beq.w	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d07b      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	461a      	mov	r2, r3
 8001f84:	2301      	movs	r3, #1
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d04c      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe f95f 	bl	800027c <HAL_GetTick>
 8001fbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe f95b 	bl	800027c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e114      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d108      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002006:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	e00d      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	10908100 	.word	0x10908100
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2202      	movs	r2, #2
 800202a:	613a      	str	r2, [r7, #16]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	60fa      	str	r2, [r7, #12]
  return(result);
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b252      	sxtb	r2, r2
 800203c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002040:	b252      	sxtb	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0b6      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	496a      	ldr	r1, [pc, #424]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d008      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002086:	4b61      	ldr	r3, [pc, #388]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	495e      	ldr	r1, [pc, #376]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002094:	4313      	orrs	r3, r2
 8002096:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4956      	ldr	r1, [pc, #344]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c2:	4b52      	ldr	r3, [pc, #328]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f023 0210 	bic.w	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4947      	ldr	r1, [pc, #284]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80020fe:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	4940      	ldr	r1, [pc, #256]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f023 0220 	bic.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4938      	ldr	r1, [pc, #224]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800212a:	4313      	orrs	r3, r2
 800212c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4931      	ldr	r1, [pc, #196]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4929      	ldr	r1, [pc, #164]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002176:	4b25      	ldr	r3, [pc, #148]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	4922      	ldr	r1, [pc, #136]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	4913      	ldr	r1, [pc, #76]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3748      	adds	r7, #72	; 0x48
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e084      	b.n	800232c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f002 fa9d 	bl	800477c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2202      	movs	r2, #2
 8002246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002262:	d902      	bls.n	800226a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	e002      	b.n	8002270 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002278:	d007      	beq.n	800228a <HAL_SPI_Init+0x7a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002282:	d002      	beq.n	800228a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800229a:	d903      	bls.n	80022a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
 80022a2:	e002      	b.n	80022aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0204 	and.w	r2, r3, #4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	ea42 0103 	orr.w	r1, r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e01d      	b.n	8002382 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f002 fa50 	bl	8004800 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	4619      	mov	r1, r3
 8002372:	4610      	mov	r0, r2
 8002374:	f000 fa22 	bl	80027bc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e01d      	b.n	80023d8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_TIM_IC_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f002 fa4b 	bl	800484c <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f000 f9f7 	bl	80027bc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0202 	mvn.w	r2, #2
 800240c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9ab 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f99d 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9ae 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0204 	mvn.w	r2, #4
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f981 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f973 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f984 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0208 	mvn.w	r2, #8
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2204      	movs	r2, #4
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f957 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f949 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f95a 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0210 	mvn.w	r2, #16
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2208      	movs	r2, #8
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f92d 	bl	800277e <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f91f 	bl	800276a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f930 	bl	8002792 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0201 	mvn.w	r2, #1
 800255c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8f9 	bl	8002756 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	2b80      	cmp	r3, #128	; 0x80
 8002570:	d10e      	bne.n	8002590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d107      	bne.n	8002590 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002588:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fef6 	bl	800337c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d10e      	bne.n	80025be <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d107      	bne.n	80025be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fee9 	bl	8003390 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d10e      	bne.n	80025ea <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d107      	bne.n	80025ea <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8de 	bl	80027a6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d10e      	bne.n	8002616 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b20      	cmp	r3, #32
 8002604:	d107      	bne.n	8002616 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f06f 0220 	mvn.w	r2, #32
 800260e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fea9 	bl	8003368 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002634:	2302      	movs	r3, #2
 8002636:	e08a      	b.n	800274e <HAL_TIM_IC_ConfigChannel+0x130>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  if (Channel == TIM_CHANNEL_1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11b      	bne.n	8002686 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fb63 	bl	8002d28 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 020c 	bic.w	r2, r2, #12
 8002670:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6999      	ldr	r1, [r3, #24]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	619a      	str	r2, [r3, #24]
 8002684:	e05a      	b.n	800273c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d11c      	bne.n	80026c6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f000 fbb0 	bl	8002e00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026ae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	021a      	lsls	r2, r3, #8
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
 80026c4:	e03a      	b.n	800273c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f000 fbd1 	bl	8002e82 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69da      	ldr	r2, [r3, #28]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020c 	bic.w	r2, r2, #12
 80026ee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69d9      	ldr	r1, [r3, #28]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	e01b      	b.n	800273c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6819      	ldr	r1, [r3, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 fbf5 	bl	8002f02 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002726:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69d9      	ldr	r1, [r3, #28]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	021a      	lsls	r2, r3, #8
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK; 
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <TIM_Base_SetConfig+0x108>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00f      	beq.n	80027f8 <TIM_Base_SetConfig+0x3c>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d00b      	beq.n	80027f8 <TIM_Base_SetConfig+0x3c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <TIM_Base_SetConfig+0x10c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_Base_SetConfig+0x3c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a38      	ldr	r2, [pc, #224]	; (80028cc <TIM_Base_SetConfig+0x110>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_Base_SetConfig+0x3c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <TIM_Base_SetConfig+0x114>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d108      	bne.n	800280a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <TIM_Base_SetConfig+0x108>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01b      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d017      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <TIM_Base_SetConfig+0x10c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a29      	ldr	r2, [pc, #164]	; (80028cc <TIM_Base_SetConfig+0x110>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <TIM_Base_SetConfig+0x114>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a27      	ldr	r2, [pc, #156]	; (80028d4 <TIM_Base_SetConfig+0x118>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <TIM_Base_SetConfig+0x11c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x8e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <TIM_Base_SetConfig+0x120>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <TIM_Base_SetConfig+0x108>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00f      	beq.n	80028a8 <TIM_Base_SetConfig+0xec>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <TIM_Base_SetConfig+0x114>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00b      	beq.n	80028a8 <TIM_Base_SetConfig+0xec>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <TIM_Base_SetConfig+0x118>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <TIM_Base_SetConfig+0xec>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <TIM_Base_SetConfig+0x11c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0xec>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <TIM_Base_SetConfig+0x120>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xf4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800

080028e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0201 	bic.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f023 0302 	bic.w	r3, r3, #2
 8002938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <TIM_OC1_SetConfig+0x118>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00f      	beq.n	800296c <TIM_OC1_SetConfig+0x8c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <TIM_OC1_SetConfig+0x11c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00b      	beq.n	800296c <TIM_OC1_SetConfig+0x8c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <TIM_OC1_SetConfig+0x120>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_OC1_SetConfig+0x8c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a29      	ldr	r2, [pc, #164]	; (8002a04 <TIM_OC1_SetConfig+0x124>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_OC1_SetConfig+0x8c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <TIM_OC1_SetConfig+0x128>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d10c      	bne.n	8002986 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0308 	bic.w	r3, r3, #8
 8002972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <TIM_OC1_SetConfig+0x118>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00f      	beq.n	80029ae <TIM_OC1_SetConfig+0xce>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <TIM_OC1_SetConfig+0x11c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_OC1_SetConfig+0xce>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <TIM_OC1_SetConfig+0x120>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <TIM_OC1_SetConfig+0xce>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a18      	ldr	r2, [pc, #96]	; (8002a04 <TIM_OC1_SetConfig+0x124>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_OC1_SetConfig+0xce>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <TIM_OC1_SetConfig+0x128>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d111      	bne.n	80029d2 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	621a      	str	r2, [r3, #32]
} 
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40013400 	.word	0x40013400
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800

08002a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0210 	bic.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0320 	bic.w	r3, r3, #32
 8002a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <TIM_OC2_SetConfig+0x10c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_OC2_SetConfig+0x78>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <TIM_OC2_SetConfig+0x110>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10d      	bne.n	8002aa0 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9e:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <TIM_OC2_SetConfig+0x10c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00f      	beq.n	8002ac8 <TIM_OC2_SetConfig+0xbc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <TIM_OC2_SetConfig+0x110>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <TIM_OC2_SetConfig+0xbc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <TIM_OC2_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_OC2_SetConfig+0xbc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <TIM_OC2_SetConfig+0x118>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_OC2_SetConfig+0xbc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <TIM_OC2_SetConfig+0x11c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d113      	bne.n	8002af0 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ace:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad6:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40013400 	.word	0x40013400
 8002b20:	40014000 	.word	0x40014000
 8002b24:	40014400 	.word	0x40014400
 8002b28:	40014800 	.word	0x40014800

08002b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <TIM_OC3_SetConfig+0x108>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_OC3_SetConfig+0x76>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <TIM_OC3_SetConfig+0x10c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bbc:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <TIM_OC3_SetConfig+0x108>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_OC3_SetConfig+0xba>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <TIM_OC3_SetConfig+0x10c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_OC3_SetConfig+0xba>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <TIM_OC3_SetConfig+0x110>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_OC3_SetConfig+0xba>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <TIM_OC3_SetConfig+0x114>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_OC3_SetConfig+0xba>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <TIM_OC3_SetConfig+0x118>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d113      	bne.n	8002c0e <TIM_OC3_SetConfig+0xe2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf4:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400
 8002c44:	40014800 	.word	0x40014800

08002c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	031b      	lsls	r3, r3, #12
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <TIM_OC4_SetConfig+0xcc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_OC4_SetConfig+0x90>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a17      	ldr	r2, [pc, #92]	; (8002d18 <TIM_OC4_SetConfig+0xd0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_OC4_SetConfig+0x90>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <TIM_OC4_SetConfig+0xd4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_OC4_SetConfig+0x90>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <TIM_OC4_SetConfig+0xd8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_OC4_SetConfig+0x90>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <TIM_OC4_SetConfig+0xdc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d109      	bne.n	8002cec <TIM_OC4_SetConfig+0xa4>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cde:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	019b      	lsls	r3, r3, #6
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40013400 	.word	0x40013400
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <TIM_TI1_SetConfig+0xc4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_TI1_SetConfig+0x5e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d00f      	beq.n	8002d86 <TIM_TI1_SetConfig+0x5e>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <TIM_TI1_SetConfig+0xc8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_TI1_SetConfig+0x5e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <TIM_TI1_SetConfig+0xcc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_TI1_SetConfig+0x5e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <TIM_TI1_SetConfig+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_TI1_SetConfig+0x5e>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <TIM_TI1_SetConfig+0xd4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <TIM_TI1_SetConfig+0x62>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <TIM_TI1_SetConfig+0x64>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e003      	b.n	8002daa <TIM_TI1_SetConfig+0x82>
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 030a 	and.w	r3, r3, #10
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40013400 	.word	0x40013400
 8002dfc:	40014000 	.word	0x40014000

08002e00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	031b      	lsls	r3, r3, #12
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002eda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	031b      	lsls	r3, r3, #12
 8002f62:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	621a      	str	r2, [r3, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e105      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x226>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b14      	cmp	r3, #20
 8002fb2:	f200 80f0 	bhi.w	8003196 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08003011 	.word	0x08003011
 8002fc0:	08003197 	.word	0x08003197
 8002fc4:	08003197 	.word	0x08003197
 8002fc8:	08003197 	.word	0x08003197
 8002fcc:	08003051 	.word	0x08003051
 8002fd0:	08003197 	.word	0x08003197
 8002fd4:	08003197 	.word	0x08003197
 8002fd8:	08003197 	.word	0x08003197
 8002fdc:	08003093 	.word	0x08003093
 8002fe0:	08003197 	.word	0x08003197
 8002fe4:	08003197 	.word	0x08003197
 8002fe8:	08003197 	.word	0x08003197
 8002fec:	080030d3 	.word	0x080030d3
 8002ff0:	08003197 	.word	0x08003197
 8002ff4:	08003197 	.word	0x08003197
 8002ff8:	08003197 	.word	0x08003197
 8002ffc:	08003115 	.word	0x08003115
 8003000:	08003197 	.word	0x08003197
 8003004:	08003197 	.word	0x08003197
 8003008:	08003197 	.word	0x08003197
 800300c:	08003155 	.word	0x08003155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc62 	bl	80028e0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0208 	orr.w	r2, r2, #8
 800302a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6999      	ldr	r1, [r3, #24]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
    }
    break;
 800304e:	e0a3      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fcd8 	bl	8002a0c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	619a      	str	r2, [r3, #24]
    }
    break;
 8003090:	e082      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fd47 	bl	8002b2c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0208 	orr.w	r2, r2, #8
 80030ac:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0204 	bic.w	r2, r2, #4
 80030bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69d9      	ldr	r1, [r3, #28]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]
    }
    break;
 80030d0:	e062      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fdb5 	bl	8002c48 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ec:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	61da      	str	r2, [r3, #28]
    }
    break;
 8003112:	e041      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f942 	bl	80033a4 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0208 	orr.w	r2, r2, #8
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003152:	e021      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f98c 	bl	8003478 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003194:	e000      	b.n	8003198 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8003196:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e03d      	b.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d108      	bne.n	800320a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4313      	orrs	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
} 
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40013400 	.word	0x40013400

0800325c <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003274:	2302      	movs	r3, #2
 8003276:	e06c      	b.n	8003352 <HAL_TIMEx_ConfigBreakDeadTime+0xf6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a16      	ldr	r2, [pc, #88]	; (8003360 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d115      	bne.n	8003340 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	051b      	lsls	r3, r3, #20
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40013400 	.word	0x40013400

08003368 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033f4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <TIM_OC5_SetConfig+0xc0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_OC5_SetConfig+0x86>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a16      	ldr	r2, [pc, #88]	; (8003468 <TIM_OC5_SetConfig+0xc4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_OC5_SetConfig+0x86>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <TIM_OC5_SetConfig+0xc8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_OC5_SetConfig+0x86>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC5_SetConfig+0xcc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_OC5_SetConfig+0x86>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <TIM_OC5_SetConfig+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d109      	bne.n	800343e <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40013400 	.word	0x40013400
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800

08003478 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	051b      	lsls	r3, r3, #20
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <TIM_OC6_SetConfig+0xc4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00f      	beq.n	8003500 <TIM_OC6_SetConfig+0x88>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <TIM_OC6_SetConfig+0xc8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00b      	beq.n	8003500 <TIM_OC6_SetConfig+0x88>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <TIM_OC6_SetConfig+0xcc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_OC6_SetConfig+0x88>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <TIM_OC6_SetConfig+0xd0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC6_SetConfig+0x88>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC6_SetConfig+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d109      	bne.n	8003514 <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	029b      	lsls	r3, r3, #10
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
} 
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40013400 	.word	0x40013400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e043      	b.n	80035ea <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 f9ec 	bl	8004954 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	; 0x24
 8003580:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f96d 	bl	8003874 <UART_SetConfig>
 800359a:	4603      	mov	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e022      	b.n	80035ea <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb5f 	bl	8003c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fbe6 	bl	8003db4 <UART_CheckIdleState>
 80035e8:	4603      	mov	r3, r0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_UART_IRQHandler+0x42>
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f003 0320 	and.w	r3, r3, #32
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fcf7 	bl	8004022 <UART_Receive_IT>
      return;
 8003634:	e0fa      	b.n	800382c <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80ba 	beq.w	80037ba <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80af 	beq.w	80037ba <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <HAL_UART_IRQHandler+0x90>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <HAL_UART_IRQHandler+0xb8>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2202      	movs	r2, #2
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a4:	f043 0204 	orr.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <HAL_UART_IRQHandler+0xe0>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2204      	movs	r2, #4
 80036c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2208      	movs	r2, #8
 80036f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 808d 	beq.w	800382a <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_UART_IRQHandler+0x136>
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fc7c 	bl	8004022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d131      	bne.n	80037a8 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fbc8 	bl	8003eda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d123      	bne.n	80037a0 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003766:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003774:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <HAL_UART_IRQHandler+0x240>)
 8003776:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fe96 	bl	80004ae <HAL_DMA_Abort_IT>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	e00e      	b.n	80037b6 <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f861 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379e:	e00a      	b.n	80037b6 <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f85d 	bl	8003860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	e006      	b.n	80037b6 <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f859 	bl	8003860 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80037b4:	e039      	b.n	800382a <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b6:	bf00      	nop
    return;
 80037b8:	e037      	b.n	800382a <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1fc>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037d6:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fc84 	bl	80040f6 <HAL_UARTEx_WakeupCallback>
    return;
 80037ee:	e01d      	b.n	800382c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_UART_IRQHandler+0x218>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fb9c 	bl	8003f42 <UART_Transmit_IT>
    return;
 800380a:	e00f      	b.n	800382c <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_UART_IRQHandler+0x238>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fbe6 	bl	8003ff2 <UART_EndTransmit_IT>
    return;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_UART_IRQHandler+0x238>
    return;
 800382a:	bf00      	nop
  }

}
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	08003f17 	.word	0x08003f17

08003838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003880:	2310      	movs	r3, #16
 8003882:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003884:	2300      	movs	r3, #0
 8003886:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003888:	2300      	movs	r3, #0
 800388a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038b2:	f023 030c 	bic.w	r3, r3, #12
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4ab4      	ldr	r2, [pc, #720]	; (8003bcc <UART_SetConfig+0x358>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d121      	bne.n	8003944 <UART_SetConfig+0xd0>
 8003900:	4bb3      	ldr	r3, [pc, #716]	; (8003bd0 <UART_SetConfig+0x35c>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d817      	bhi.n	800393c <UART_SetConfig+0xc8>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0xa0>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003925 	.word	0x08003925
 8003918:	08003931 	.word	0x08003931
 800391c:	08003937 	.word	0x08003937
 8003920:	0800392b 	.word	0x0800392b
 8003924:	2301      	movs	r3, #1
 8003926:	75fb      	strb	r3, [r7, #23]
 8003928:	e0b2      	b.n	8003a90 <UART_SetConfig+0x21c>
 800392a:	2302      	movs	r3, #2
 800392c:	75fb      	strb	r3, [r7, #23]
 800392e:	e0af      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003930:	2304      	movs	r3, #4
 8003932:	75fb      	strb	r3, [r7, #23]
 8003934:	e0ac      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003936:	2308      	movs	r3, #8
 8003938:	75fb      	strb	r3, [r7, #23]
 800393a:	e0a9      	b.n	8003a90 <UART_SetConfig+0x21c>
 800393c:	2310      	movs	r3, #16
 800393e:	75fb      	strb	r3, [r7, #23]
 8003940:	bf00      	nop
 8003942:	e0a5      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4aa2      	ldr	r2, [pc, #648]	; (8003bd4 <UART_SetConfig+0x360>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d123      	bne.n	8003996 <UART_SetConfig+0x122>
 800394e:	4ba0      	ldr	r3, [pc, #640]	; (8003bd0 <UART_SetConfig+0x35c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d012      	beq.n	8003982 <UART_SetConfig+0x10e>
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d802      	bhi.n	8003968 <UART_SetConfig+0xf4>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <UART_SetConfig+0x102>
 8003966:	e012      	b.n	800398e <UART_SetConfig+0x11a>
 8003968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800396c:	d00c      	beq.n	8003988 <UART_SetConfig+0x114>
 800396e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003972:	d003      	beq.n	800397c <UART_SetConfig+0x108>
 8003974:	e00b      	b.n	800398e <UART_SetConfig+0x11a>
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]
 800397a:	e089      	b.n	8003a90 <UART_SetConfig+0x21c>
 800397c:	2302      	movs	r3, #2
 800397e:	75fb      	strb	r3, [r7, #23]
 8003980:	e086      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003982:	2304      	movs	r3, #4
 8003984:	75fb      	strb	r3, [r7, #23]
 8003986:	e083      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003988:	2308      	movs	r3, #8
 800398a:	75fb      	strb	r3, [r7, #23]
 800398c:	e080      	b.n	8003a90 <UART_SetConfig+0x21c>
 800398e:	2310      	movs	r3, #16
 8003990:	75fb      	strb	r3, [r7, #23]
 8003992:	bf00      	nop
 8003994:	e07c      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8f      	ldr	r2, [pc, #572]	; (8003bd8 <UART_SetConfig+0x364>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d123      	bne.n	80039e8 <UART_SetConfig+0x174>
 80039a0:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <UART_SetConfig+0x35c>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80039a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ac:	d012      	beq.n	80039d4 <UART_SetConfig+0x160>
 80039ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b2:	d802      	bhi.n	80039ba <UART_SetConfig+0x146>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <UART_SetConfig+0x154>
 80039b8:	e012      	b.n	80039e0 <UART_SetConfig+0x16c>
 80039ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039be:	d00c      	beq.n	80039da <UART_SetConfig+0x166>
 80039c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039c4:	d003      	beq.n	80039ce <UART_SetConfig+0x15a>
 80039c6:	e00b      	b.n	80039e0 <UART_SetConfig+0x16c>
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
 80039cc:	e060      	b.n	8003a90 <UART_SetConfig+0x21c>
 80039ce:	2302      	movs	r3, #2
 80039d0:	75fb      	strb	r3, [r7, #23]
 80039d2:	e05d      	b.n	8003a90 <UART_SetConfig+0x21c>
 80039d4:	2304      	movs	r3, #4
 80039d6:	75fb      	strb	r3, [r7, #23]
 80039d8:	e05a      	b.n	8003a90 <UART_SetConfig+0x21c>
 80039da:	2308      	movs	r3, #8
 80039dc:	75fb      	strb	r3, [r7, #23]
 80039de:	e057      	b.n	8003a90 <UART_SetConfig+0x21c>
 80039e0:	2310      	movs	r3, #16
 80039e2:	75fb      	strb	r3, [r7, #23]
 80039e4:	bf00      	nop
 80039e6:	e053      	b.n	8003a90 <UART_SetConfig+0x21c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7b      	ldr	r2, [pc, #492]	; (8003bdc <UART_SetConfig+0x368>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d123      	bne.n	8003a3a <UART_SetConfig+0x1c6>
 80039f2:	4b77      	ldr	r3, [pc, #476]	; (8003bd0 <UART_SetConfig+0x35c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d012      	beq.n	8003a26 <UART_SetConfig+0x1b2>
 8003a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a04:	d802      	bhi.n	8003a0c <UART_SetConfig+0x198>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <UART_SetConfig+0x1a6>
 8003a0a:	e012      	b.n	8003a32 <UART_SetConfig+0x1be>
 8003a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a10:	d00c      	beq.n	8003a2c <UART_SetConfig+0x1b8>
 8003a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a16:	d003      	beq.n	8003a20 <UART_SetConfig+0x1ac>
 8003a18:	e00b      	b.n	8003a32 <UART_SetConfig+0x1be>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]
 8003a1e:	e037      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a20:	2302      	movs	r3, #2
 8003a22:	75fb      	strb	r3, [r7, #23]
 8003a24:	e034      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a26:	2304      	movs	r3, #4
 8003a28:	75fb      	strb	r3, [r7, #23]
 8003a2a:	e031      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	75fb      	strb	r3, [r7, #23]
 8003a30:	e02e      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a32:	2310      	movs	r3, #16
 8003a34:	75fb      	strb	r3, [r7, #23]
 8003a36:	bf00      	nop
 8003a38:	e02a      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <UART_SetConfig+0x36c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d123      	bne.n	8003a8c <UART_SetConfig+0x218>
 8003a44:	4b62      	ldr	r3, [pc, #392]	; (8003bd0 <UART_SetConfig+0x35c>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a50:	d012      	beq.n	8003a78 <UART_SetConfig+0x204>
 8003a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a56:	d802      	bhi.n	8003a5e <UART_SetConfig+0x1ea>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <UART_SetConfig+0x1f8>
 8003a5c:	e012      	b.n	8003a84 <UART_SetConfig+0x210>
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a62:	d00c      	beq.n	8003a7e <UART_SetConfig+0x20a>
 8003a64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a68:	d003      	beq.n	8003a72 <UART_SetConfig+0x1fe>
 8003a6a:	e00b      	b.n	8003a84 <UART_SetConfig+0x210>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	75fb      	strb	r3, [r7, #23]
 8003a70:	e00e      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a72:	2302      	movs	r3, #2
 8003a74:	75fb      	strb	r3, [r7, #23]
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	75fb      	strb	r3, [r7, #23]
 8003a7c:	e008      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	75fb      	strb	r3, [r7, #23]
 8003a82:	e005      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a84:	2310      	movs	r3, #16
 8003a86:	75fb      	strb	r3, [r7, #23]
 8003a88:	bf00      	nop
 8003a8a:	e001      	b.n	8003a90 <UART_SetConfig+0x21c>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a98:	d16f      	bne.n	8003b7a <UART_SetConfig+0x306>
  {
    switch (clocksource)
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d857      	bhi.n	8003b50 <UART_SetConfig+0x2dc>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0x234>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003ae9 	.word	0x08003ae9
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003b51 	.word	0x08003b51
 8003ab8:	08003b1f 	.word	0x08003b1f
 8003abc:	08003b51 	.word	0x08003b51
 8003ac0:	08003b51 	.word	0x08003b51
 8003ac4:	08003b51 	.word	0x08003b51
 8003ac8:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003acc:	f7fe f9ac 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	005a      	lsls	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	441a      	add	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	82bb      	strh	r3, [r7, #20]
        break;
 8003ae6:	e036      	b.n	8003b56 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ae8:	f7fe f9c0 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003aec:	4603      	mov	r3, r0
 8003aee:	005a      	lsls	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	82bb      	strh	r3, [r7, #20]
        break;
 8003b02:	e028      	b.n	8003b56 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003b0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6852      	ldr	r2, [r2, #4]
 8003b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b1a:	82bb      	strh	r3, [r7, #20]
        break;
 8003b1c:	e01b      	b.n	8003b56 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b1e:	f7fe f90d 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003b22:	4603      	mov	r3, r0
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	82bb      	strh	r3, [r7, #20]
        break;
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	82bb      	strh	r3, [r7, #20]
        break;
 8003b4e:	e002      	b.n	8003b56 <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	74fb      	strb	r3, [r7, #19]
        break;
 8003b54:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003b56:	8abb      	ldrh	r3, [r7, #20]
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5e:	8abb      	ldrh	r3, [r7, #20]
 8003b60:	105b      	asrs	r3, r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	897a      	ldrh	r2, [r7, #10]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e075      	b.n	8003c66 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d86f      	bhi.n	8003c60 <UART_SetConfig+0x3ec>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x314>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003be5 	.word	0x08003be5
 8003b90:	08003c05 	.word	0x08003c05
 8003b94:	08003c61 	.word	0x08003c61
 8003b98:	08003c25 	.word	0x08003c25
 8003b9c:	08003c61 	.word	0x08003c61
 8003ba0:	08003c61 	.word	0x08003c61
 8003ba4:	08003c61 	.word	0x08003c61
 8003ba8:	08003c45 	.word	0x08003c45
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bac:	f7fe f93c 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60da      	str	r2, [r3, #12]
        break;
 8003bca:	e04c      	b.n	8003c66 <UART_SetConfig+0x3f2>
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	40004c00 	.word	0x40004c00
 8003be0:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003be4:	f7fe f942 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
        break;
 8003c02:	e030      	b.n	8003c66 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003c0e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6852      	ldr	r2, [r2, #4]
 8003c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
        break;
 8003c22:	e020      	b.n	8003c66 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c24:	f7fe f88a 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	441a      	add	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60da      	str	r2, [r3, #12]
        break;
 8003c42:	e010      	b.n	8003c66 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
        break;
 8003c5e:	e002      	b.n	8003c66 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	74fb      	strb	r3, [r7, #19]
        break;
 8003c64:	bf00      	nop
    }
  }

  return ret;
 8003c66:	7cfb      	ldrb	r3, [r7, #19]

}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6e:	d10a      	bne.n	8003d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003dc6:	f7fc fa59 	bl	800027c <HAL_GetTick>
 8003dca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d10e      	bne.n	8003df8 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f82c 	bl	8003e46 <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e022      	b.n	8003e3e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d10e      	bne.n	8003e24 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f816 	bl	8003e46 <UART_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00c      	b.n	8003e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e56:	e02c      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e5e:	d028      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	f7fc fa09 	bl	800027c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d21d      	bcs.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d0c3      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ef0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fc93 	bl	8003860 <HAL_UART_ErrorCallback>
}
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b21      	cmp	r3, #33	; 0x21
 8003f54:	d146      	bne.n	8003fe4 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d111      	bne.n	8003f86 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f70:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e02f      	b.n	8003fe6 <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	d114      	bne.n	8003fba <UART_Transmit_IT+0x78>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d110      	bne.n	8003fba <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003faa:	b292      	uxth	r2, r2
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fb8:	e009      	b.n	8003fce <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fc10 	bl	8003838 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004030:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b22      	cmp	r3, #34	; 0x22
 800403c:	d14e      	bne.n	80040dc <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004044:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	d112      	bne.n	8004076 <UART_Receive_IT+0x54>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10e      	bne.n	8004076 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800405e:	89ba      	ldrh	r2, [r7, #12]
 8004060:	89fb      	ldrh	r3, [r7, #14]
 8004062:	4013      	ands	r3, r2
 8004064:	b29a      	uxth	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
 8004074:	e00b      	b.n	800408e <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004076:	89bb      	ldrh	r3, [r7, #12]
 8004078:	b2d9      	uxtb	r1, r3
 800407a:	89fb      	ldrh	r3, [r7, #14]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	1c5c      	adds	r4, r3, #1
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	6544      	str	r4, [r0, #84]	; 0x54
 8004088:	400a      	ands	r2, r1
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29b      	uxth	r3, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4619      	mov	r1, r3
 800409e:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fbbc 	bl	800384c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e00a      	b.n	80040ee <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e008      	b.n	80040ee <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0208 	orr.w	r2, r2, #8
 80040ea:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}

080040f6 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800410e:	f7fc f85b 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004112:	f000 f80f 	bl	8004134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004116:	f000 fa41 	bl	800459c <MX_GPIO_Init>
  MX_I2C1_Init();
 800411a:	f000 f873 	bl	8004204 <MX_I2C1_Init>
  MX_SPI1_Init();
 800411e:	f000 f8b1 	bl	8004284 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8004122:	f000 fa19 	bl	8004558 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8004126:	f000 f8eb 	bl	8004300 <MX_TIM1_Init>
  MX_TIM8_Init();
 800412a:	f000 f979 	bl	8004420 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800412e:	f000 f9e3 	bl	80044f8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004132:	e7fe      	b.n	8004132 <main+0x28>

08004134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b09e      	sub	sp, #120	; 0x78
 8004138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800413a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800413e:	2228      	movs	r2, #40	; 0x28
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fd78 	bl	8004c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004158:	463b      	mov	r3, r7
 800415a:	223c      	movs	r2, #60	; 0x3c
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd6a 	bl	8004c38 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004164:	2303      	movs	r3, #3
 8004166:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004168:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800416c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004172:	2301      	movs	r3, #1
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004176:	2310      	movs	r3, #16
 8004178:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800417a:	2302      	movs	r3, #2
 800417c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800417e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004182:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004184:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004188:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800418a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fd6a 	bl	8000c68 <HAL_RCC_OscConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800419a:	f000 fa7f 	bl	800469c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800419e:	230f      	movs	r3, #15
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041a2:	2302      	movs	r3, #2
 80041a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041a6:	2300      	movs	r3, #0
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fc41 	bl	8001a44 <HAL_RCC_ClockConfig>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80041c8:	f000 fa68 	bl	800469c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <SystemClock_Config+0xcc>)
 80041ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80041d8:	2300      	movs	r3, #0
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e4:	463b      	mov	r3, r7
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fe62 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80041f2:	f000 fa53 	bl	800469c <Error_Handler>
  }
}
 80041f6:	bf00      	nop
 80041f8:	3778      	adds	r7, #120	; 0x78
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	00023022 	.word	0x00023022

08004204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <MX_I2C1_Init+0x74>)
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <MX_I2C1_Init+0x78>)
 800420c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <MX_I2C1_Init+0x74>)
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <MX_I2C1_Init+0x7c>)
 8004212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <MX_I2C1_Init+0x74>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <MX_I2C1_Init+0x74>)
 800421c:	2201      	movs	r2, #1
 800421e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <MX_I2C1_Init+0x74>)
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <MX_I2C1_Init+0x74>)
 8004228:	2200      	movs	r2, #0
 800422a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <MX_I2C1_Init+0x74>)
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <MX_I2C1_Init+0x74>)
 8004234:	2200      	movs	r2, #0
 8004236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <MX_I2C1_Init+0x74>)
 800423a:	2200      	movs	r2, #0
 800423c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800423e:	480e      	ldr	r0, [pc, #56]	; (8004278 <MX_I2C1_Init+0x74>)
 8004240:	f7fc fb0a 	bl	8000858 <HAL_I2C_Init>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800424a:	f000 fa27 	bl	800469c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800424e:	2100      	movs	r1, #0
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <MX_I2C1_Init+0x74>)
 8004252:	f7fc fb90 	bl	8000976 <HAL_I2CEx_ConfigAnalogFilter>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800425c:	f000 fa1e 	bl	800469c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004260:	2100      	movs	r1, #0
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <MX_I2C1_Init+0x74>)
 8004264:	f7fc fbd2 	bl	8000a0c <HAL_I2CEx_ConfigDigitalFilter>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800426e:	f000 fa15 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	2000006c 	.word	0x2000006c
 800427c:	40005400 	.word	0x40005400
 8004280:	2000090e 	.word	0x2000090e

08004284 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <MX_SPI1_Init+0x74>)
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <MX_SPI1_Init+0x78>)
 800428c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800428e:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <MX_SPI1_Init+0x74>)
 8004290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <MX_SPI1_Init+0x74>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800429c:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <MX_SPI1_Init+0x74>)
 800429e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80042a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042ba:	2208      	movs	r2, #8
 80042bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042d2:	2207      	movs	r2, #7
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042de:	2208      	movs	r2, #8
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e2:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_SPI1_Init+0x74>)
 80042e4:	f7fd ff94 	bl	8002210 <HAL_SPI_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80042ee:	f000 f9d5 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200000f8 	.word	0x200000f8
 80042fc:	40013000 	.word	0x40013000

08004300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b096      	sub	sp, #88	; 0x58
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004306:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	615a      	str	r2, [r3, #20]
 8004324:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	222c      	movs	r2, #44	; 0x2c
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fc83 	bl	8004c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <MX_TIM1_Init+0x118>)
 8004334:	4a39      	ldr	r2, [pc, #228]	; (800441c <MX_TIM1_Init+0x11c>)
 8004336:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <MX_TIM1_Init+0x118>)
 800433a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800433e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <MX_TIM1_Init+0x118>)
 8004342:	2200      	movs	r2, #0
 8004344:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 8004346:	4b34      	ldr	r3, [pc, #208]	; (8004418 <MX_TIM1_Init+0x118>)
 8004348:	f241 0267 	movw	r2, #4199	; 0x1067
 800434c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <MX_TIM1_Init+0x118>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <MX_TIM1_Init+0x118>)
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <MX_TIM1_Init+0x118>)
 800435c:	2200      	movs	r2, #0
 800435e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004360:	482d      	ldr	r0, [pc, #180]	; (8004418 <MX_TIM1_Init+0x118>)
 8004362:	f7fd ffe7 	bl	8002334 <HAL_TIM_PWM_Init>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800436c:	f000 f996 	bl	800469c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004370:	2300      	movs	r3, #0
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004374:	2300      	movs	r3, #0
 8004376:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800437c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004380:	4619      	mov	r1, r3
 8004382:	4825      	ldr	r0, [pc, #148]	; (8004418 <MX_TIM1_Init+0x118>)
 8004384:	f7fe ff16 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800438e:	f000 f985 	bl	800469c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004392:	2360      	movs	r3, #96	; 0x60
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1;
 8004396:	2301      	movs	r3, #1
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800439a:	2300      	movs	r3, #0
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800439e:	2300      	movs	r3, #0
 80043a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043aa:	2300      	movs	r3, #0
 80043ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043b2:	2200      	movs	r2, #0
 80043b4:	4619      	mov	r1, r3
 80043b6:	4818      	ldr	r0, [pc, #96]	; (8004418 <MX_TIM1_Init+0x118>)
 80043b8:	f7fe fde4 	bl	8002f84 <HAL_TIM_PWM_ConfigChannel>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80043c2:	f000 f96b 	bl	800469c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80043e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4807      	ldr	r0, [pc, #28]	; (8004418 <MX_TIM1_Init+0x118>)
 80043fc:	f7fe ff2e 	bl	800325c <HAL_TIMEx_ConfigBreakDeadTime>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8004406:	f000 f949 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800440a:	4803      	ldr	r0, [pc, #12]	; (8004418 <MX_TIM1_Init+0x118>)
 800440c:	f000 fa6a 	bl	80048e4 <HAL_TIM_MspPostInit>

}
 8004410:	bf00      	nop
 8004412:	3758      	adds	r7, #88	; 0x58
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	200000b8 	.word	0x200000b8
 800441c:	40012c00 	.word	0x40012c00

08004420 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004426:	f107 0314 	add.w	r3, r7, #20
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <MX_TIM8_Init+0xd4>)
 8004442:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7199;
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004446:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800444a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <MX_TIM8_Init+0xd0>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004454:	f241 3287 	movw	r2, #4999	; 0x1387
 8004458:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <MX_TIM8_Init+0xd0>)
 800445c:	2200      	movs	r2, #0
 800445e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004462:	2200      	movs	r2, #0
 8004464:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800446c:	4820      	ldr	r0, [pc, #128]	; (80044f0 <MX_TIM8_Init+0xd0>)
 800446e:	f7fd ff8c 	bl	800238a <HAL_TIM_IC_Init>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8004478:	f000 f910 	bl	800469c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	4818      	ldr	r0, [pc, #96]	; (80044f0 <MX_TIM8_Init+0xd0>)
 8004490:	f7fe fe90 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800449a:	f000 f8ff 	bl	800469c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80044a2:	2301      	movs	r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 80044aa:	2308      	movs	r3, #8
 80044ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	2200      	movs	r2, #0
 80044b2:	4619      	mov	r1, r3
 80044b4:	480e      	ldr	r0, [pc, #56]	; (80044f0 <MX_TIM8_Init+0xd0>)
 80044b6:	f7fe f8b2 	bl	800261e <HAL_TIM_IC_ConfigChannel>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80044c0:	f000 f8ec 	bl	800469c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80044c4:	2302      	movs	r3, #2
 80044c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80044c8:	2302      	movs	r3, #2
 80044ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	2204      	movs	r2, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <MX_TIM8_Init+0xd0>)
 80044d8:	f7fe f8a1 	bl	800261e <HAL_TIM_IC_ConfigChannel>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80044e2:	f000 f8db 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000002c 	.word	0x2000002c
 80044f4:	40013400 	.word	0x40013400

080044f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <MX_USART2_UART_Init+0x58>)
 80044fe:	4a15      	ldr	r2, [pc, #84]	; (8004554 <MX_USART2_UART_Init+0x5c>)
 8004500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004504:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <MX_USART2_UART_Init+0x58>)
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004512:	2200      	movs	r2, #0
 8004514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004518:	2200      	movs	r2, #0
 800451a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <MX_USART2_UART_Init+0x58>)
 800451e:	220c      	movs	r2, #12
 8004520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <MX_USART2_UART_Init+0x58>)
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004530:	2200      	movs	r2, #0
 8004532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <MX_USART2_UART_Init+0x58>)
 8004536:	2200      	movs	r2, #0
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <MX_USART2_UART_Init+0x58>)
 800453c:	f7ff f808 	bl	8003550 <HAL_UART_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004546:	f000 f8a9 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000015c 	.word	0x2000015c
 8004554:	40004400 	.word	0x40004400

08004558 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <MX_USB_PCD_Init+0x40>)
 8004560:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 8004564:	2208      	movs	r2, #8
 8004566:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 800456a:	2202      	movs	r2, #2
 800456c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 8004570:	2202      	movs	r2, #2
 8004572:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 8004576:	2200      	movs	r2, #0
 8004578:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 800457c:	2200      	movs	r2, #0
 800457e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004580:	4804      	ldr	r0, [pc, #16]	; (8004594 <MX_USB_PCD_Init+0x3c>)
 8004582:	f7fc fa91 	bl	8000aa8 <HAL_PCD_Init>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800458c:	f000 f886 	bl	800469c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200001cc 	.word	0x200001cc
 8004598:	40005c00 	.word	0x40005c00

0800459c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4a36      	ldr	r2, [pc, #216]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045bc:	6153      	str	r3, [r2, #20]
 80045be:	4b34      	ldr	r3, [pc, #208]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	4a30      	ldr	r2, [pc, #192]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045d4:	6153      	str	r3, [r2, #20]
 80045d6:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4a2a      	ldr	r2, [pc, #168]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ec:	6153      	str	r3, [r2, #20]
 80045ee:	4b28      	ldr	r3, [pc, #160]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	4b25      	ldr	r3, [pc, #148]	; (8004690 <MX_GPIO_Init+0xf4>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4a24      	ldr	r2, [pc, #144]	; (8004690 <MX_GPIO_Init+0xf4>)
 8004600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004604:	6153      	str	r3, [r2, #20]
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <MX_GPIO_Init+0xf4>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <MX_GPIO_Init+0xf4>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <MX_GPIO_Init+0xf4>)
 8004618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461c:	6153      	str	r3, [r2, #20]
 800461e:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <MX_GPIO_Init+0xf4>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800462a:	2200      	movs	r2, #0
 800462c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8004630:	4818      	ldr	r0, [pc, #96]	; (8004694 <MX_GPIO_Init+0xf8>)
 8004632:	f7fc f8f9 	bl	8000828 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8004636:	2337      	movs	r3, #55	; 0x37
 8004638:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800463a:	4b17      	ldr	r3, [pc, #92]	; (8004698 <MX_GPIO_Init+0xfc>)
 800463c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	4812      	ldr	r0, [pc, #72]	; (8004694 <MX_GPIO_Init+0xf8>)
 800464a:	f7fb ff6f 	bl	800052c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 800464e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8004652:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004654:	2301      	movs	r3, #1
 8004656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800465c:	2300      	movs	r3, #0
 800465e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4619      	mov	r1, r3
 8004666:	480b      	ldr	r0, [pc, #44]	; (8004694 <MX_GPIO_Init+0xf8>)
 8004668:	f7fb ff60 	bl	800052c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004670:	2300      	movs	r3, #0
 8004672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4619      	mov	r1, r3
 800467e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004682:	f7fb ff53 	bl	800052c <HAL_GPIO_Init>

}
 8004686:	bf00      	nop
 8004688:	3728      	adds	r7, #40	; 0x28
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	48001000 	.word	0x48001000
 8004698:	10120000 	.word	0x10120000

0800469c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_MspInit+0x44>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_MspInit+0x44>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6193      	str	r3, [r2, #24]
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_MspInit+0x44>)
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_MspInit+0x44>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <HAL_MspInit+0x44>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_MspInit+0x44>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80046e2:	2007      	movs	r0, #7
 80046e4:	f7fb fea2 	bl	800042c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <HAL_I2C_MspInit+0x7c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d127      	bne.n	8004766 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	4b17      	ldr	r3, [pc, #92]	; (8004774 <HAL_I2C_MspInit+0x80>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_I2C_MspInit+0x80>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6153      	str	r3, [r2, #20]
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_I2C_MspInit+0x80>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800472e:	23c0      	movs	r3, #192	; 0xc0
 8004730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004732:	2312      	movs	r3, #18
 8004734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004736:	2301      	movs	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800473a:	2303      	movs	r3, #3
 800473c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800473e:	2304      	movs	r3, #4
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004742:	f107 0314 	add.w	r3, r7, #20
 8004746:	4619      	mov	r1, r3
 8004748:	480b      	ldr	r0, [pc, #44]	; (8004778 <HAL_I2C_MspInit+0x84>)
 800474a:	f7fb feef 	bl	800052c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_I2C_MspInit+0x80>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_I2C_MspInit+0x80>)
 8004754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004758:	61d3      	str	r3, [r2, #28]
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_I2C_MspInit+0x80>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004766:	bf00      	nop
 8004768:	3728      	adds	r7, #40	; 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40005400 	.word	0x40005400
 8004774:	40021000 	.word	0x40021000
 8004778:	48000400 	.word	0x48000400

0800477c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <HAL_SPI_MspInit+0x7c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d128      	bne.n	80047f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	4a16      	ldr	r2, [pc, #88]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047a8:	6193      	str	r3, [r2, #24]
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c0:	6153      	str	r3, [r2, #20]
 80047c2:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_SPI_MspInit+0x80>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80047ce:	23e0      	movs	r3, #224	; 0xe0
 80047d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047da:	2303      	movs	r3, #3
 80047dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047de:	2305      	movs	r3, #5
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e2:	f107 0314 	add.w	r3, r7, #20
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ec:	f7fb fe9e 	bl	800052c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047f0:	bf00      	nop
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40013000 	.word	0x40013000
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <HAL_TIM_PWM_MspInit+0x44>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d113      	bne.n	800483a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <HAL_TIM_PWM_MspInit+0x48>)
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <HAL_TIM_PWM_MspInit+0x48>)
 8004818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800481c:	6193      	str	r3, [r2, #24]
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <HAL_TIM_PWM_MspInit+0x48>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	201b      	movs	r0, #27
 8004830:	f7fb fe07 	bl	8000442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004834:	201b      	movs	r0, #27
 8004836:	f7fb fe20 	bl	800047a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40021000 	.word	0x40021000

0800484c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM8)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_TIM_IC_MspInit+0x8c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12f      	bne.n	80048ce <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 8004874:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004878:	6193      	str	r3, [r2, #24]
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4a14      	ldr	r2, [pc, #80]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 800488c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004890:	6153      	str	r3, [r2, #20]
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_TIM_IC_MspInit+0x90>)
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800489e:	2340      	movs	r3, #64	; 0x40
 80048a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a2:	2302      	movs	r3, #2
 80048a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80048ae:	2304      	movs	r3, #4
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	4619      	mov	r1, r3
 80048b8:	4809      	ldr	r0, [pc, #36]	; (80048e0 <HAL_TIM_IC_MspInit+0x94>)
 80048ba:	f7fb fe37 	bl	800052c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	202e      	movs	r0, #46	; 0x2e
 80048c4:	f7fb fdbd 	bl	8000442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80048c8:	202e      	movs	r0, #46	; 0x2e
 80048ca:	f7fb fdd6 	bl	800047a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048ce:	bf00      	nop
 80048d0:	3728      	adds	r7, #40	; 0x28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40013400 	.word	0x40013400
 80048dc:	40021000 	.word	0x40021000
 80048e0:	48000800 	.word	0x48000800

080048e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a12      	ldr	r2, [pc, #72]	; (800494c <HAL_TIM_MspPostInit+0x68>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d11d      	bne.n	8004942 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	4a11      	ldr	r2, [pc, #68]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	6153      	str	r3, [r2, #20]
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_TIM_MspPostInit+0x6c>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800491e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004922:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004930:	2306      	movs	r3, #6
 8004932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	4619      	mov	r1, r3
 800493a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800493e:	f7fb fdf5 	bl	800052c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_UART_MspInit+0x8c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d130      	bne.n	80049d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <HAL_UART_MspInit+0x90>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_UART_MspInit+0x90>)
 800497c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004980:	61d3      	str	r3, [r2, #28]
 8004982:	4b18      	ldr	r3, [pc, #96]	; (80049e4 <HAL_UART_MspInit+0x90>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_UART_MspInit+0x90>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_UART_MspInit+0x90>)
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	6153      	str	r3, [r2, #20]
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_UART_MspInit+0x90>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049a6:	230c      	movs	r3, #12
 80049a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	2302      	movs	r3, #2
 80049ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b2:	2303      	movs	r3, #3
 80049b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80049b6:	2307      	movs	r3, #7
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ba:	f107 0314 	add.w	r3, r7, #20
 80049be:	4619      	mov	r1, r3
 80049c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049c4:	f7fb fdb2 	bl	800052c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2100      	movs	r1, #0
 80049cc:	2026      	movs	r0, #38	; 0x26
 80049ce:	f7fb fd38 	bl	8000442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049d2:	2026      	movs	r0, #38	; 0x26
 80049d4:	f7fb fd51 	bl	800047a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80049d8:	bf00      	nop
 80049da:	3728      	adds	r7, #40	; 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_PCD_MspInit+0x80>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d129      	bne.n	8004a5e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a14:	6153      	str	r3, [r2, #20]
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8004a22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a30:	2303      	movs	r3, #3
 8004a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004a34:	230e      	movs	r3, #14
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a42:	f7fb fd73 	bl	800052c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a50:	61d3      	str	r3, [r2, #28]
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_PCD_MspInit+0x84>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40005c00 	.word	0x40005c00
 8004a6c:	40021000 	.word	0x40021000

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a82:	e7fe      	b.n	8004a82 <HardFault_Handler+0x4>

08004a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a88:	e7fe      	b.n	8004a88 <MemManage_Handler+0x4>

08004a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8e:	e7fe      	b.n	8004a8e <BusFault_Handler+0x4>

08004a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a94:	e7fe      	b.n	8004a94 <UsageFault_Handler+0x4>

08004a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a96:	b480      	push	{r7}
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac4:	f7fb fbc6 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac8:	bf00      	nop
 8004aca:	bd80      	pop	{r7, pc}

08004acc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <TIM1_CC_IRQHandler+0x10>)
 8004ad2:	f7fd fc85 	bl	80023e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200000b8 	.word	0x200000b8

08004ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <USART2_IRQHandler+0x10>)
 8004ae6:	f7fe fd85 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	2000015c 	.word	0x2000015c

08004af4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004af8:	4802      	ldr	r0, [pc, #8]	; (8004b04 <TIM8_CC_IRQHandler+0x10>)
 8004afa:	f7fd fc71 	bl	80023e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000002c 	.word	0x2000002c

08004b08 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b0c:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <SystemInit+0x84>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <SystemInit+0x84>)
 8004b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <SystemInit+0x88>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <SystemInit+0x88>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <SystemInit+0x88>)
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	4918      	ldr	r1, [pc, #96]	; (8004b90 <SystemInit+0x88>)
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <SystemInit+0x8c>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <SystemInit+0x88>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <SystemInit+0x88>)
 8004b3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <SystemInit+0x88>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <SystemInit+0x88>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <SystemInit+0x88>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a0e      	ldr	r2, [pc, #56]	; (8004b90 <SystemInit+0x88>)
 8004b56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004b5a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <SystemInit+0x88>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <SystemInit+0x88>)
 8004b62:	f023 030f 	bic.w	r3, r3, #15
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <SystemInit+0x88>)
 8004b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6c:	4908      	ldr	r1, [pc, #32]	; (8004b90 <SystemInit+0x88>)
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <SystemInit+0x90>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <SystemInit+0x88>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <SystemInit+0x84>)
 8004b7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b80:	609a      	str	r2, [r3, #8]
#endif
}
 8004b82:	bf00      	nop
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00
 8004b90:	40021000 	.word	0x40021000
 8004b94:	f87fc00c 	.word	0xf87fc00c
 8004b98:	ff00fccc 	.word	0xff00fccc

08004b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ba0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ba2:	e003      	b.n	8004bac <LoopCopyDataInit>

08004ba4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ba6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ba8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004baa:	3104      	adds	r1, #4

08004bac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004bac:	480b      	ldr	r0, [pc, #44]	; (8004bdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004bb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004bb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004bb4:	d3f6      	bcc.n	8004ba4 <CopyDataInit>
	ldr	r2, =_sbss
 8004bb6:	4a0b      	ldr	r2, [pc, #44]	; (8004be4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004bb8:	e002      	b.n	8004bc0 <LoopFillZerobss>

08004bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004bba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004bbc:	f842 3b04 	str.w	r3, [r2], #4

08004bc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <LoopForever+0x16>)
	cmp	r2, r3
 8004bc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004bc4:	d3f9      	bcc.n	8004bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004bc6:	f7ff ff9f 	bl	8004b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bca:	f000 f811 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bce:	f7ff fa9c 	bl	800410a <main>

08004bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8004bd2:	e7fe      	b.n	8004bd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bd4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004bd8:	08004ca0 	.word	0x08004ca0
	ldr	r0, =_sdata
 8004bdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004be0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004be4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004be8:	20000574 	.word	0x20000574

08004bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bec:	e7fe      	b.n	8004bec <ADC1_2_IRQHandler>
	...

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4e0d      	ldr	r6, [pc, #52]	; (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	; (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1ba4      	subs	r4, r4, r6
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	42a5      	cmp	r5, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4e0b      	ldr	r6, [pc, #44]	; (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	; (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f820 	bl	8004c48 <_init>
 8004c08:	1ba4      	subs	r4, r4, r6
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	42a5      	cmp	r5, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c18:	4798      	blx	r3
 8004c1a:	3501      	adds	r5, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c22:	4798      	blx	r3
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08004c98 	.word	0x08004c98
 8004c2c:	08004c98 	.word	0x08004c98
 8004c30:	08004c98 	.word	0x08004c98
 8004c34:	08004c9c 	.word	0x08004c9c

08004c38 <memset>:
 8004c38:	4402      	add	r2, r0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <memset+0xa>
 8004c40:	4770      	bx	lr
 8004c42:	f803 1b01 	strb.w	r1, [r3], #1
 8004c46:	e7f9      	b.n	8004c3c <memset+0x4>

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr
